---
import Item from './Item.astro';
import Mark from './Mark.astro';

interface Props {
  locations: Location[];
  markSize?: number;
}

type LocationId = string;

export interface Location<S = string> {
  id: LocationId;
  sector: S;
  depends?: LocationId | LocationId[];
  name: string;
  status?: 'important' | 'urgent' | 'hard' | 'careful';
  x: number;
  y: number;
  avoid?: number[];
}

export type Locations<S, V extends Location<S>> = Record<string, V>;

const { locations, markSize } = Astro.props;
---
<section
  x-data="{ checked: [], hide: false, radio: '', showAll: false }"
  x-init={`
    checked = JSON.parse(localStorage.getItem('sm-checked') || '[]');
    $watch('checked', value => {
      localStorage.setItem('sm-checked', JSON.stringify(value));
      if (hide && checked.includes(radio)) {
        radio = '';
      }
    });
    radio = localStorage.getItem('sm-radio') || '';
    $watch('radio', value => {
      localStorage.setItem('sm-radio', value);
      document.querySelector('.location:checked')?.focus();
    });
    showAll = localStorage.getItem('sm-show-all') == 'true';
    $watch('showAll', value => localStorage.setItem('sm-show-all', value));
    $nextTick(() => { document.querySelector('.location:checked')?.focus(); });
  `.trim().replace(/\s\s+/g, ' ')}
  id="locations"
  class="relative group/locations grid grid-cols-[auto_1fr] h-[95vh]"
>
  <nav class="relative h-full overflow-y-scroll border text-gray-200 bg-blue-950 w-70 rounded-l text-sm">
    <ul role="list" class="grid">
      <li class="sticky inset-y top-0 flex justify-evenly gap-2 bg-slate-900 p-2 z-10">
        <input x-model="showAll" class="all" type="checkbox" title="Show All" />
        <button class="px-2 py-1 border text-xs bg-slate-800" @click="checked = []">
          Clear checboxes
        </button>
        <button class="px-2 py-1 border text-xs bg-slate-800" @click="radio = '';">
          Clear radio
        </button>
        <button class="px-2 py-1 border text-xs bg-slate-800" @click="checked = []; radio = '';">
          Clear all
        </button>
        <input x-model="hide" type="checkbox" class="hide" title="Hide completed">
        <input type="checkbox" class="zoom" title="Allow Zoom" checked>
      </li>
      <li class="px-2 py-1 has-[.all:checked]/li:bg-sky-950">
        <div class="flex">
          <label class="cursor-pointer px-2 py-1 flex gap-2">
            <input type="radio" name="location" value="" x-model="radio" />
            <span>Full Map</span>
          </label>
        </div>
      </li>
      {locations.map((location, key) => (
        <li class="group/li relative has-[.done:checked]/li:bg-green-950">
          <div class="">
            <div class="absolute inset-0 pointer-events-none z-0 group-hover/li:bg-black/20 group-[:has(.location:checked)]/li:bg-white/30 group-[:has(.location:checked)]/li:animate-pulse" />
            <div class="flex gap-2 px-2 py-1 items-center">
              <div class="w-8 text-right">{key+1}.</div>
              <Item x-model="checked" {...{location, locations}} pos={key+1} />
            </div>
          </div>
        </li>
        ))}
      </li>
    </ul>
  </nav>
  <div class="relative h-full aspect-square border overflow-hidden">
    <div
      id="map"
      class="absolute top-0 left-0 h-[200%] w-[200%] border border-red-300 bg-contain bg-no-repeat bg-center transition-transform"
    >
      {locations.map((location, key) => (
        <Mark location={location} pos={key+1} size={markSize} />
      ))}
    </div>
  </div>
</section>
